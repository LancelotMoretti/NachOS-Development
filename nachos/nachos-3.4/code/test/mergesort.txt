#include "syscall.h"
#include "copyright.h"
#define MAX 99

void merge(float arr[], int start, int mid, int end, int arrIdx[])
{
    int start2 = mid + 1;
    float ptrValue;
    int ptrIdx;
    int index;

    if (arr[mid] <= arr[start2]) {
        return;
    }

    while (start <= mid && start2 <= end) {

        if (arr[start] <= arr[start2]) {
            start++;
        }
        else {
            ptrValue = arr[start2];
            ptrIdx = arrIdx[start2];
            index = start2;

            while (index != start) {
                arr[index] = arr[index - 1];
                arrIdx[index] = arrIdx[index - 1];
                index--;
            }
            arr[start++] = ptrValue;
            arrIdx[start - 1] = ptrIdx;
            mid++;
            start2++;
        }
    }
}

void mergeSort(float pArr[], int left, int right, int arrIdx[])
{
    int mid;
    if (left < right) {
        mid = left + (right - left) / 2;
        mergeSort(pArr, left, mid, arrIdx);
        mergeSort(pArr, mid + 1, right, arrIdx);
        merge(pArr, left, mid, right, arrIdx);
    }
}

int main() {
    float* arr[MAX];
    float tmp[MAX];
    int arrIdx[MAX];
    int n;
    int count = 0;
    OpenFileId output;
    char *space = " ";
    char *inputEle = "Element ";
    char *colon = ": ";

    PrintString("Enter the number of elements: ");
    n = ReadInt();
    PrintString("Enter the elements:\n");
    while (count < n) {
        PrintString(inputEle);
        PrintInt(count);
        PrintString(colon);
        arr[count] = ReadFloat();
        tmp[count] = *(arr[count]);
        arrIdx[count] = count;
        count++;
    }
    count = 0;

    mergeSort(tmp, 0, n - 1, arrIdx);

    PrintString("Merge sort successfully\n");

    if (Create("mergesort.txt") == -1) {
        PrintString("Error creating file\n");
        Halt();
    }

    PrintString("Creating file mergesort.txt successfully\n");

    output = Open("mergesort.txt", 0);
    if (output == -1) {
        PrintString("Error opening file\n");
        Halt();
    }

    PrintString("Opening file mergesort.txt successfully\n");

    while (count++ < n) {
        WriteF2File(arr[arrIdx[count - 1]], output);
        if (count < n) Write(space, 1, output);
    }

    PrintString("Write to file mergesort.txt successfully\n");

    Close(output);

    for (count = 0; count < n; count++) {
        ClearFloat(arr[count]);
    }

    Halt();
}



#include "syscall.h"
#include "copyright.h"
#define MAX 99

void merge(int* arr[], int start, int mid, int end)
{
    int start2 = mid + 1;
    int value;
    int index;

    if (*(arr[mid]) <= *(arr[start2])) {
        return;
    }

    while (start <= mid && start2 <= end) {

        if (*(arr[start]) <= *(arr[start2])) {
            start++;
        }
        else {
            value = *(arr[start2]);
            index = start2;

            while (index != start) {
                *(arr[index]) = *(arr[index - 1]);
                index--;
            }
            *(arr[start++]) = value;
            mid++;
            start2++;
        }
    }
}

void mergeSort(int* arr[], int left, int right)
{
    int mid;
    if (left < right) {
        mid = left + (right - left) / 2;
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    float* arr[MAX];
    int* arrFloat[MAX];
    int n;
    int count = 0;
    OpenFileId output;
    char *inputEle = "Elem ";
    char *colon = ": ";
    char *space = " ";

    PrintString("Enter n: ");
    n = ReadInt();
    PrintString("Array:\n");
    while (count < n) {
        PrintString(inputEle);
        PrintInt(count);
        PrintString(colon);
        arr[count] = ReadFloat();
        count++;
    }
    count = 0;

    while (count < n) {
        arrFloat[count] = (int)arr[count];
        count++;
    }
    count = 0;

    mergeSort(arrFloat, 0, n - 1);

    PrintString("Mergesort success\n");

    if (Create("mergesort.txt") == -1) Halt();

    PrintString("Creating file mergesort.txt successfully\n");

    output = Open("mergesort.txt", 0);
    if (output == -1) Halt();

    PrintString("Opening file mergesort.txt successfully\n");

    while (count++ < n) {
        WriteF2File(arr[count - 1], output);
        Write(space, 1, output);
    }

    PrintString("Write to file mergesort.txt successfully\n");

    Close(output);

    for (count = 0; count < n; count++) {
        ClearFloat(arr[count]);
    }

    Halt();
}